<?php

namespace App\Http\Controllers\MIS;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Session;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Crypt;
use App\User;
use Illuminate\Support\Facades\Validator;
use UserPermissionAuth;
use App\Models\Employee\Employee_details;
use App\Models\Employee\Employee_attribute;
use App\Models\Company\Divison;
use App\Models\Company\Department;
use App\Models\Company\Product;
use App\Models\MIS\ProductMis;
use App\Models\MIS\ENBDCardsImportFiles;
use App\Models\MIS\ENBDCardsMisReport;
use App\Models\MIS\MainMisImportFiles;
use App\Models\MIS\JonusReportLog;
use App\Models\Entry\Employee;
use App\Models\MIS\MainMisReport;
use App\Models\MIS\CurrentActivity;
use App\Models\MIS\ENDBCARDStatus;
use App\Models\MIS\MonthlyEnds;
use App\Models\Attribute\Attributes;
use App\Models\MIS\BankDetailsUAE;
use App\Models\MIS\MainMisImportENBDCardsTabFiles;
use App\Models\MIS\MainMisReportTab;
use App\Models\LoanMis\ENDBLoanMis;
use Codedge\Fpdf\Fpdf\Fpdf;
use App\PDFMarge\FPDF_Merge;

class ReportingController extends Controller
{
  
			
			
			public static function getReportMisCards($monthSelected,$yearSelected,$status,$leaderId,$type )
			{
				
				$newMonth = $monthSelected-1;
				$currentYear = $yearSelected;
						if($newMonth == 0)
						{
							$newMonth = 12;
							 $currentYear =  $currentYear-1;
						}
				$dateFrom = $currentYear.'-'.$newMonth.'-21';
				$dateTo = $yearSelected.'-'.$monthSelected.'-20';
				
				if($status == 'login')
				{
					if($type == 'all')
					{
					return MainMisReport::whereDate("submission_format",">=",$dateFrom)->whereDate("submission_format","<=",$dateTo)->where("TL",$leaderId)->get()->count();
					}
					else
					{
					return MainMisReport::whereDate("submission_format",">=",$dateFrom)->whereDate("submission_format","<=",$dateTo)->where("file_source",$type)->where("TL",$leaderId)->get()->count();	
					}
				}
				else
				{
					if($type == 'all')
					{
						return MainMisReport::whereDate("submission_format",">=",$dateFrom)->whereDate("submission_format","<=",$dateTo)->where("TL",$leaderId)->where("approved_notapproved",$status)->get()->count();
					}
					else
					{
						return MainMisReport::whereDate("submission_format",">=",$dateFrom)->whereDate("submission_format","<=",$dateTo)->where("TL",$leaderId)->where("file_source",$type)->where("approved_notapproved",$status)->get()->count();
					}
				}
			}
			
			public static function getWaiting($monthSelected,$yearSelected,$leaderId,$type)
			{
				
				$newMonth = $monthSelected-1;
				$currentYear = $yearSelected;
						if($newMonth == 0)
						{
							$newMonth = 12;
							 $currentYear =  $currentYear-1;
						}
				$dateFrom = $currentYear.'-'.$newMonth.'-21';
				$dateTo = $yearSelected.'-'.$monthSelected.'-20';
				if($type == 'all')
					{
						return MainMisReport::whereDate("submission_format",">=",$dateFrom)->whereDate("submission_format","<=",$dateTo)->where("TL",$leaderId)->whereNull("approved_notapproved")->get()->count();
					}
					else
					{
						return MainMisReport::whereDate("submission_format",">=",$dateFrom)->whereDate("submission_format","<=",$dateTo)->where("TL",$leaderId)->where("file_source",$type)->whereNull("approved_notapproved")->get()->count();
					}
			}
			
			
			public static function getReportMisLoan($monthSelected,$yearSelected,$status,$leaderId,$product)
			{
				$newMonth = $monthSelected-1;
				$currentYear = $yearSelected;
						if($newMonth == 0)
						{
							$newMonth = 12;
							 $currentYear =  $currentYear-1;
						}
				$dateFrom = $currentYear.'-'.$newMonth.'-21';
				$dateTo = $yearSelected.'-'.$monthSelected.'-20';
				
				if($status == 'login')
				{
					return ENDBLoanMis::whereDate("date_of_submission",">=",$dateFrom)->whereDate("date_of_submission","<=",$dateTo)->where("TL_NAME",$leaderId)->where("PRODUCT",$product)->get()->count();
				}
				else
				{
					return ENDBLoanMis::whereDate("date_of_submission",">=",$dateFrom)->whereDate("date_of_submission","<=",$dateTo)->where("TL_NAME",$leaderId)->where("PRODUCT",$product)->where("STATUS",$status)->get()->count();
					
				}
			}
			
			public static function getLeaderName($id)
			{
				$name = Employee_details::where("id",$id)->first();
				if($name != '')
				{
					return $name->first_name.' '.$name->middle_name.' '.$name->last_name;
				}
				else
				{
					return '--';
				}
				 
			}
			
			
			public function generateReportPDF()
			{
				$this->fpdf = new Fpdf;
				
				$this->fpdf->AddPage();
				$this->fpdf->SetFont('helvetica','',7);
				$x = 10;
				$y = 10;
				$this->fpdf->rect($x,$y,$x+180,90);
				$this->fpdf->line($x+10,$y,$x+10,100);
				$this->fpdf->line($x+10,$y+10,$x+190,$y+10);
				$y = $y+10;
				$this->fpdf->line($x+10,$y+10,$x+190,$y+10);
				
				$this->fpdf->line($x+10,$y+15,$x+190,$y+15);
				/*cards*/
				$this->fpdf->Text($x+32,$y+13,strtoupper("Credit Card"));
				/*logins*/
				$this->fpdf->Text($x+13,$y+20,strtoupper("S"));
				$this->fpdf->Text($x+13,$y+25,strtoupper("N"));
				$this->fpdf->Text($x+13,$y+30,strtoupper("I"));
				$this->fpdf->Text($x+13,$y+35,strtoupper("G"));
				$this->fpdf->Text($x+13,$y+40,strtoupper("O"));
				$this->fpdf->Text($x+13,$y+45,strtoupper("L"));
				/*logins*/
				/*approved*/
				$this->fpdf->Text($x+23,$y+20,strtoupper("D"));
				$this->fpdf->Text($x+23,$y+24,strtoupper("E"));
				$this->fpdf->Text($x+23,$y+28,strtoupper("V"));
				$this->fpdf->Text($x+23,$y+32,strtoupper("O"));
				$this->fpdf->Text($x+23,$y+36,strtoupper("R"));
				$this->fpdf->Text($x+23,$y+40,strtoupper("P"));
				$this->fpdf->Text($x+23,$y+44,strtoupper("P"));
				$this->fpdf->Text($x+23,$y+48,strtoupper("A"));
				/*approved*/
				
				/*PHYISCAL END*/
				$this->fpdf->Text($x+33,$y+18,strtoupper("D"));
				$this->fpdf->Text($x+33,$y+21,strtoupper("N"));
				$this->fpdf->Text($x+33,$y+24,strtoupper("E"));
				$this->fpdf->Text($x+33,$y+25,strtoupper(" "));
				$this->fpdf->Text($x+33,$y+28,strtoupper("L"));
				$this->fpdf->Text($x+33,$y+31,strtoupper("A"));
				$this->fpdf->Text($x+33,$y+34,strtoupper("C"));
				$this->fpdf->Text($x+33,$y+37,strtoupper("S"));
				$this->fpdf->Text($x+33,$y+40,strtoupper("I"));
				$this->fpdf->Text($x+33,$y+43,strtoupper("Y"));
				$this->fpdf->Text($x+33,$y+46,strtoupper("H"));
				$this->fpdf->Text($x+33,$y+49,strtoupper("P"));
				/*PHYISCAL END*/
				$this->fpdf->line($x+10,$y+15,$x+10,100);
				$this->fpdf->line($x+20,$y+15,$x+20,100);
				$this->fpdf->line($x+30,$y+15,$x+30,100);
				$this->fpdf->line($x+40,$y+15,$x+40,100);
				$this->fpdf->line($x+50,$y+15,$x+50,100);
				$this->fpdf->line($x+60,$y+15,$x+60,100);
				$this->fpdf->line($x+70,$y+10,$x+70,100);
				
				$this->fpdf->line($x+10,$y+50,$x+70,$y+50);
				$this->fpdf->line($x+10,$y+60,$x+70,$y+60);
				$this->fpdf->line($x+10,$y+70,$x+70,$y+70);
				/*cards*/
				$this->fpdf->line($x+100,$y+10,$x+100,100);
				$this->fpdf->line($x+150,$y+10,$x+150,100);
				$this->fpdf->Output(); 
			}

}